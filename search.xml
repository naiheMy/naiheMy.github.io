<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Linux】Ubuntu添加root用户</title>
      <link href="/2024/07/10/%E3%80%90Linux%E3%80%91Ubuntu%E6%B7%BB%E5%8A%A0root%E7%94%A8%E6%88%B7/"/>
      <url>/2024/07/10/%E3%80%90Linux%E3%80%91Ubuntu%E6%B7%BB%E5%8A%A0root%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>在Ubuntu中，默认情况下是禁用了root用户的登录。如果仍然想要启用root用户，并设置root用户的密码，应按照以下步骤进行操作：</p><p>一、输入sudo passwd root设置root用户密码</p><p><img src="/../images%5C1705654534619.png" alt="img"></p><p>二、切换root用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">su root</span><br></pre></td></tr></table></figure><p>这两条命令均可却换至root用户</p><p><img src="/../images%5C1705654534654.png" alt="img"></p><p><img src="/../images%5C1705654534729.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Nginx】反向代理和负载均衡的配置</title>
      <link href="/2024/07/10/%E3%80%90Nginx%E3%80%91%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/07/10/%E3%80%90Nginx%E3%80%91%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="【Nginx】反向代理和负载均衡的配置"><a href="#【Nginx】反向代理和负载均衡的配置" class="headerlink" title="【Nginx】反向代理和负载均衡的配置"></a>【Nginx】反向代理和负载均衡的配置</h1><h2 id="一、反向代理"><a href="#一、反向代理" class="headerlink" title="一、反向代理"></a>一、反向代理</h2><p>配置文件位置：nginx&#x2F;conf&#x2F;nginx.conf</p><p>配置方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /api/ &#123;</span><br><span class="line">proxy_pass   http://localhost:8080/admin/;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>如上段代码，通过反向代理，将包含api的请求全部发送到后端对应的地址：<a href="http://localhost:8080/admin/">http://localhost:8080/admin/</a></p><p>我们也可以把后端对应的ip地址和端口号改为webservers,这样可以方便我们配置负载均衡。</p><h2 id="二、负载均衡"><a href="#二、负载均衡" class="headerlink" title="二、负载均衡"></a>二、负载均衡</h2><p>配置方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">  server 192.168.200.135:8080 weight=90 ;</span><br><span class="line">  server 192.168.200.137:8088 weight=10 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的weight是计算的权重，通过权重值将前端的请求向不同的后端发送</p><p>除了权重配置负载均衡，还有其他方式：</p><p><img src="C:\Users\MAOFENG\AppData\Roaming\Typora\typora-user-images\image-20240301160404229.png" alt="image-20240301160404229"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
