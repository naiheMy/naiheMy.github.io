<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Nginx】反向代理和负载均衡的配置</title>
      <link href="/2024/07/12/%E3%80%90Nginx%E3%80%91%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/07/12/%E3%80%90Nginx%E3%80%91%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、反向代理"><a href="#一、反向代理" class="headerlink" title="一、反向代理"></a>一、反向代理</h2><p>配置文件位置：nginx&#x2F;conf&#x2F;nginx.conf</p><p>配置方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /api/ &#123;</span><br><span class="line">proxy_pass   http://localhost:8080/admin/;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>如上段代码，通过反向代理，将包含api的请求全部发送到后端对应的地址：<a href="http://localhost:8080/admin/">http://localhost:8080/admin/</a></p><p>我们也可以把后端对应的ip地址和端口号改为webservers,这样可以方便我们配置负载均衡。</p><h2 id="二、负载均衡"><a href="#二、负载均衡" class="headerlink" title="二、负载均衡"></a>二、负载均衡</h2><p>配置方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">  server 192.168.200.135:8080 weight=90 ;</span><br><span class="line">  server 192.168.200.137:8088 weight=10 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的weight是计算的权重，通过权重值将前端的请求向不同的后端发送</p><p>除了权重配置负载均衡，还有其他方式：</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121104636.png" alt="image-20240301160404229"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Ubuntu配置SSH服务</title>
      <link href="/2023/12/02/%E3%80%90Linux%E3%80%91Ubuntu%E9%85%8D%E7%BD%AESSH%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/12/02/%E3%80%90Linux%E3%80%91Ubuntu%E9%85%8D%E7%BD%AESSH%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要在Ubuntu上配置SSH服务，首先安装ssh-server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp; &nbsp; &nbsp; 安装完成后，可以检查一下是否安装成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status ssh</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp; &nbsp; &nbsp; 此时ubuntu就可以被远程连接工具连接了，如果我们想配置关于SCP服务允许传输root用户的文件，需要修改以下配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121645327.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改后重启ssh服务，即可发送root用户的文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Ubuntu添加root用户</title>
      <link href="/2023/12/02/%E3%80%90Linux%E3%80%91Ubuntu%E6%B7%BB%E5%8A%A0root%E7%94%A8%E6%88%B7/"/>
      <url>/2023/12/02/%E3%80%90Linux%E3%80%91Ubuntu%E6%B7%BB%E5%8A%A0root%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>在Ubuntu中，默认情况下是禁用了root用户的登录。如果仍然想要启用root用户，并设置root用户的密码，应按照以下步骤进行操作：</p><p>一、输入sudo passwd root设置root用户密码</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121100975.png"></p><p>二、切换root用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">su root</span><br></pre></td></tr></table></figure><p>这两条命令均可却换至root用户</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121100976.png"></p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121100977.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】tree命令的独特用法</title>
      <link href="/2023/11/10/%E3%80%90Linux%E3%80%91tree%E5%91%BD%E4%BB%A4%E7%9A%84%E7%8B%AC%E7%89%B9%E7%94%A8%E6%B3%95/"/>
      <url>/2023/11/10/%E3%80%90Linux%E3%80%91tree%E5%91%BD%E4%BB%A4%E7%9A%84%E7%8B%AC%E7%89%B9%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有关tree命令，我们只知道它可以将文件目录以树状图的形式展示，但其实还有很多有意思的功能可以使用。</p><h2 id="一、tree命令的安装"><a href="#一、tree命令的安装" class="headerlink" title="一、tree命令的安装"></a>一、tree命令的安装</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;各linux版本不同，但软件包名字就叫tree，直接安装即可</p><p>ubuntu：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install tree</span><br></pre></td></tr></table></figure><p>centos：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tree</span><br></pre></td></tr></table></figure><h2 id="二、独特技巧"><a href="#二、独特技巧" class="headerlink" title="二、独特技巧"></a>二、独特技巧</h2><h3 id="1-指定目录深度"><a href="#1-指定目录深度" class="headerlink" title="1.指定目录深度"></a>1.指定目录深度</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过使用-L标志，你可以指定你想要查看的目录的深度。例如，tree -L 2将只显示两层的目录结构。可以避免目录过深的文件影响查阅。</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121654766.png"></p><h3 id="2-按文件大小排序："><a href="#2-按文件大小排序：" class="headerlink" title="2.按文件大小排序："></a>2.按文件大小排序：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree可以按文件大小进行排序。你可以使用-s标志来实现这个功能。例如，tree -s将按文件大小排序结果。</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121654767.png"></p><h3 id="3-显示隐藏文件："><a href="#3-显示隐藏文件：" class="headerlink" title="3.显示隐藏文件："></a>3.显示隐藏文件：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认情况下，tree不显示隐藏文件（即以.开头的文件）。如果你想要查看隐藏文件，可以使用-a标志。例如，tree -a将显示所有文件，包括隐藏文件。</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121654768.png"></p><h3 id="4-按修改时间排序-："><a href="#4-按修改时间排序-：" class="headerlink" title="4.按修改时间排序 ："></a>4.按修改时间排序 ：</h3><p>&nbsp; &nbsp; &nbsp; &nbsp; 找不到刚修改过的文件？使用-t标志，你可以按照文件或目录的最后修改时间进行排序。</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121654769.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Truffle】二、自定义合约测试</title>
      <link href="/2023/10/29/%E3%80%90Truffle%E3%80%91%E4%BA%8C%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E7%BA%A6%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/10/29/%E3%80%90Truffle%E3%80%91%E4%BA%8C%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E7%BA%A6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备测试"><a href="#一、准备测试" class="headerlink" title="一、准备测试"></a>一、准备测试</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上期我们自己安装部署了truffle，并且体验了测试用例的整个测试流程，实际开发中，我们可以对自己的合约进行测试。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 我们首先先明白自定义合约测试需要几个文件</p><ul><li>合约文件：既然要测试合约，肯定要有合约的源码文件，以.sol后缀结尾 </li><li>部署文件：测试合约要写一份部署文件，用于在测试中部署合约，以.js后缀结尾 </li><li>测试文件：测试合约的流程文件，用于对合约的方法流程进行测试，以.js后缀结尾</li></ul><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;合约文件的话，我们写一个最简单的合约用来测试,合约中定义了一个名为”number” 的无符号整数变量,通过调用 store() 函数，可以将一个无符号整数值存储到 “number” 变量中。然后，可以通过调用 retrieve() 函数来获取存储在 “number” 变量中的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=<span class="number">0.8</span><span class="number">.2</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> Storage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dev</span> Store &amp; retrieve value in a variable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@custom</span>:dev-run-script ./scripts/deploy_with_ethers.ts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract Storage &#123;</span><br><span class="line"></span><br><span class="line">    uint256 number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> Store value in variable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num value to store</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">store</span><span class="params">(uint256 num)</span> <span class="keyword">public</span> &#123;</span><br><span class="line">        number = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dev</span> Return value </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> value of &#x27;number&#x27;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">retrieve</span><span class="params">()</span> <span class="keyword">public</span> view <span class="title function_">returns</span> <span class="params">(uint256)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp; &nbsp; &nbsp; 我们把它存放到工作目录中的contracts目录下，命名为storage.sol</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 部署文件，固定的格式，可以参考之前下载的测试用例修改一下即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">Storage</span> <span class="operator">=</span> artifacts.require(<span class="string">&quot;Storage&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = function (deployer) &#123;</span><br><span class="line">  deployer.deploy(Storage);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp; &nbsp; &nbsp; 我们把它存放在migrations目录下，命名为1_deploy_contracts.js</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后是测试文件，因为这个合约只有两个方法，所以我们两个方法都要进行测试，测试用例命名为Storage_test.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;60ca67ec-d345-407d-8df7-fa688e0bfd63&quot;</span></span><br><span class="line"><span class="type">const</span> <span class="variable">Storage</span> <span class="operator">=</span> artifacts.require(<span class="string">&quot;Storage&quot;</span>);</span><br><span class="line"></span><br><span class="line">contract(<span class="string">&quot;Storage&quot;</span>, (accounts) =&gt; &#123;</span><br><span class="line">  let storageInstance;</span><br><span class="line"></span><br><span class="line">  before(async () =&gt; &#123;</span><br><span class="line">    storageInstance = await Storage.deployed();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;should store a value&quot;</span>, async () =&gt; &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">newValue</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line">    await storageInstance.store(newValue);</span><br><span class="line">    <span class="type">const</span> <span class="variable">storedValue</span> <span class="operator">=</span> await storageInstance.retrieve();</span><br><span class="line">    <span class="keyword">assert</span>.equal(storedValue, newValue, <span class="string">&quot;Value was not stored correctly&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;should retrieve the stored value&quot;</span>, async () =&gt; &#123; </span><br><span class="line">    <span class="type">const</span> <span class="variable">storedValue</span> <span class="operator">=</span> await storageInstance.retrieve();</span><br><span class="line">    <span class="keyword">assert</span>.equal(storedValue, <span class="number">42</span>, <span class="string">&quot;Stored value is incorrect&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后的目录结构是这样的:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407182123042.png"></p><h2 id="二、开始测试："><a href="#二、开始测试：" class="headerlink" title="二、开始测试："></a>二、开始测试：</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 和之前测试用例的测试方法一样，我们已经配置好了文件位置，现在可以开始测试啦</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 测试流程为：truffle develop(启用测试网络)&nbsp;&#x3D;&gt; compile(编译合约) &#x3D;&gt; migrate(部署合约) &#x3D;&gt; test(测试合约)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle develop</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407182125983.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407182125974.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407182126430.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407182126858.png">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;测试成功，我们看到，测试文档里的两个方法都通过了，至此，我们完成了自定义合约测试的整体流程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Truffle </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Truffle】一、Truffle的安装与部署</title>
      <link href="/2023/10/27/%E3%80%90Truffle%E3%80%91%E4%B8%80%E3%80%81Truffle%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/10/27/%E3%80%90Truffle%E3%80%91%E4%B8%80%E3%80%81Truffle%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备安装"><a href="#一、准备安装" class="headerlink" title="一、准备安装"></a>一、准备安装</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装truffle必须要提前配置Nodejs环境，关于Nodejs的配置，我在之前的文章中提到过版本管理方式，屡试不爽，移步这里查看： <a href="https://blog.csdn.net/naihe_fish/article/details/134027523?spm=1001.2014.3001.5501">【Linux】Ubuntu升级nodejs版本-CSDN博客</a></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 需要注意的是，nodejs的版本在官方文档的要求是&nbsp;v8.9.4 或 之后的版本，然而在实际安装部署Truffle时，尽量建议大家选择更高的版本，避免出现下图的问题！</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407172010724.png"></p><h2 id="二、安装truffle"><a href="#二、安装truffle" class="headerlink" title="二、安装truffle"></a>二、安装truffle</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我就以nodejs的20版本为例，开始安装Truffle</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 确定环境准备完成后，执行下面这条命令安装Truffle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g truffle</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp; &nbsp; &nbsp; 安装完成后&nbsp;，我们便可以创建工程啦</p><h2 id="三、创建-Truffle-项目工程"><a href="#三、创建-Truffle-项目工程" class="headerlink" title="三、创建 Truffle 项目工程"></a>三、创建 Truffle 项目工程</h2><h4 id="1-为-Truffle-项目创建新目录："><a href="#1-为-Truffle-项目创建新目录：" class="headerlink" title="1.为 Truffle 项目创建新目录："></a>1.为 Truffle 项目创建新目录：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir MetaCoin</span><br><span class="line">cd MetaCoin</span><br></pre></td></tr></table></figure><h4 id="2-下载-“unbox”-MetaCoin-box"><a href="#2-下载-“unbox”-MetaCoin-box" class="headerlink" title="2.下载 (“unbox”) MetaCoin box:"></a>2.下载 (“unbox”) MetaCoin box:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle unbox metacoin</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;这里是下载官方提供的一个合约工程，我们在后期熟练之后可以直接运行truffle init创建一个空的工程</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407172011374.png"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;这里如果下载失败了就直接运行此命令，下载的样例代码一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/truffle-box/metacoin-box.git</span></span><br></pre></td></tr></table></figure><p>在操作完成之后，就有这样的一个项目目录结构：</p><ul><li>contracts&#x2F;: 智能合约的存放目录  </li><li>migrations&#x2F;: 部署脚本目录  </li><li>test&#x2F;: 测试脚本目录  </li><li>truffle-config.js: Truffle配置文件</li></ul><h2 id="四、项目分析"><a href="#四、项目分析" class="headerlink" title="四、项目分析"></a>四、项目分析</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 我们下载的这个测试用例，已经是一个比较完整的项目体系了，接下来我们对这个项目结构进行分析</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407172012900.png"></p><ul><li>contracts：此目录存放所有需要测试的智能合约，一共有两个合约 </li><li>migrantions：此目录存放了一个部署合约脚本 </li><li>test：目录下存放了测试合约的脚本 </li><li>truffle-config.js：truffle的配置文件，可以修改一些基本信息，也可以引入第三方插件</li></ul><h2 id="五、测试合约"><a href="#五、测试合约" class="headerlink" title="五、测试合约"></a>五、测试合约</h2><p>&nbsp; &nbsp; &nbsp; &nbsp; 正常的流程为：truffle develop(启用测试网络)&nbsp;&#x3D;&gt; compile(编译合约) &#x3D;&gt; migrate(部署合约) &#x3D;&gt; test(测试合约)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 我们依次执行命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle develop</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407172014436.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407172014437.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407172014434.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test </span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接运行test是执行所有测试脚本</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407172014435.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;测试全部通过 ，至此，合约测试结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Truffle </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】解决缓存锁问题：无法获得锁 /var/lib/dpkg/lock-frontend</title>
      <link href="/2023/10/27/%E3%80%90Linux%E3%80%91%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E9%94%81%E9%97%AE%E9%A2%98%EF%BC%9A%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E9%94%81lock-frontend/"/>
      <url>/2023/10/27/%E3%80%90Linux%E3%80%91%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E9%94%81%E9%97%AE%E9%A2%98%EF%BC%9A%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E9%94%81lock-frontend/</url>
      
        <content type="html"><![CDATA[<p>今天在运行apt-get update更新后，突然发现安装新的软件出现了这个报错：正在等待缓存锁：无法获得锁 &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend。锁正由进程 1855（unattended-upgr）持有。如图。<img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121640448.png"></p><p>这个错误通常是由于其他进程正在使用APT<a href="https://so.csdn.net/so/search?q=%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8&spm=1001.2101.3001.7020">包管理器</a>而导致的。在你的情况下，进程1855（unattended-upgr）正在持有APT的锁。这是因为系统正在进行软件更新或升级。在进行这些操作时，APT会锁定相关文件以防止多个进程同时修改它们，以确保系统的稳定性和一致性。</p><p>所以一共有以下几种方法：</p><p>1.等待一会即可：让进程1855完成其任务并释放APT锁。然后再次尝试安装，就在我写完这篇博客时，我再次安装发现已经没有问题了…</p><p>2.<a href="https://so.csdn.net/so/search?q=%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B&spm=1001.2101.3001.7020">杀死进程</a>1855：sudo kill 1855。简单粗暴的方法…</p><p>3.清除锁文件：手动清除，手动清除APT的锁文件。运行以下命令</p><pre><code>sudo rm /var/lib/dpkg/lock-frontendsudo rm /var/cache/apt/archives/lock</code></pre><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121644607.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Ubuntu升级nodejs版本</title>
      <link href="/2023/10/25/%E3%80%90Linux%E3%80%91Ubuntu%E5%8D%87%E7%BA%A7nodejs%E7%89%88%E6%9C%AC/"/>
      <url>/2023/10/25/%E3%80%90Linux%E3%80%91Ubuntu%E5%8D%87%E7%BA%A7nodejs%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>&nbsp; &nbsp; &nbsp; &nbsp; 在下载nvm对nodejs版本进行管理时，由于网络因素一直下载失败，于是采用了新的方法对nodejs版本进行升级。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 首先我们先查询一下现存的nodejs版本号，发现是12</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121646171.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们下载一个名为n的软件包，n 是一个非常方便的 Node.js 版本管理工具，类似于 Ruby 的 rvm 或 Python 的 pyenv。它可以帮助你在同一台机器上轻松切换和管理多个 Node.js 版本。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在下载n之前，我们需要安装npm。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121647183.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装时若出现此问题，只需运行apt-get update更新软件包后重新安装即可&nbsp;</p><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121650463.png"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 现在安装n&nbsp;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install n -g</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121647141.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装完成后，我们可以对nodejs版本进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 升级到最新的稳定版本</span><br><span class="line">sudo n stable</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121648433.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自动为我安装了node-v20.9.0版本</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 安装完成后如果显示仍然为之前版本，使用hash -r后再次查询即可<img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121648602.png"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 当然也可以自己选择版本安装，比如我想安装一个远古版本的nodejs8.17.0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo n <span class="number">8</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/naiheMy/my_imgs@img/img/202407121648603.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FISCO-BCOS】 二、配置控制台</title>
      <link href="/2023/04/20/%E3%80%90FISCO-BCOS%E3%80%91%20%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
      <url>/2023/04/20/%E3%80%90FISCO-BCOS%E3%80%91%20%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE%E6%8E%A7%E5%88%B6%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>1.拷贝控制台配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -n console/conf/config-example.toml console/conf/config.toml</span><br></pre></td></tr></table></figure><p><img src="/../images%5C1705655062825.png" alt="img"></p><p>2.配置控制台证书</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r nodes/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/sdk<span class="comment">/* console/conf/</span></span><br></pre></td></tr></table></figure><p><img src="/../images%5C1705655062842.png" alt="img"></p><p>3.获取节点信息（控制台输入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getPeers</span><br></pre></td></tr></table></figure><p><img src="/../images%5C1705655062933.png" alt="img"></p><p>4.部署HelloWorld合约（控制台输入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy HelloWorld</span><br><span class="line"></span><br><span class="line"># transaction hash: <span class="number">0xd0305411e36d2ca9c1a4df93e761c820f0a464367b8feb9e3fa40b0f68eb23fa</span></span><br><span class="line"></span><br><span class="line"># contract address:<span class="number">0xb3c223fc0bf6646959f254ac4e4a7e355b50a344</span>（合约地址）</span><br></pre></td></tr></table></figure><p><img src="/../images%5C1705655063013.png" alt="img"></p><p>5.查看当前块高（控制台输入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getBlockNumber</span><br></pre></td></tr></table></figure><p><img src="/../images%5C1705655063032.png" alt="img"></p><p>6.调用get获取name变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call HelloWorld <span class="number">0xb3c223fc0bf6646959f254ac4e4a7e355b50a344</span> get</span><br></pre></td></tr></table></figure><p><img src="/../images%5C1705655063192.png" alt="img"></p><p>7.调用set设置name变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call HelloWorld <span class="number">0xb3c223fc0bf6646959f254ac4e4a7e355b50a344</span> set <span class="string">&quot;Life is so happy&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/../images%5C1705655063444.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> FISCO BCOS </tag>
            
            <tag> 区块链 </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
